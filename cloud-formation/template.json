{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Media Service",
    "Parameters": {
        "KeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instance",
            "Type": "String",
            "Default": "digital-cms-team"
        },
        "Stage": {
            "Description": "Environment name",
            "Type": "String",
            "AllowedValues": ["CODE", "TEST", "PROD"],
            "Default": "PROD"
        },
        "MediaApiSSLCertificateId": {
            "Description": "ARN of the SSL certificate to be used for the Media API load balancer",
            "Type": "String"
        },
        "KahunaSSLCertificateId": {
            "Description": "ARN of the SSL certificate to be used for the Kahuna load balancer",
            "Type": "String"
        },
        "ImageLoaderSSLCertificateId": {
            "Description": "ARN of the SSL certificate to be used for the Image Loader load balancer",
            "Type": "String"
        }
    },
    "Resources": {

        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SSH access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "***REMOVED***"
                    }
                ]
            }
        },

        "ElasticsearchSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Elasticsearch",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9200",
                        "ToPort": "9200",
                        "CidrIp": "***REMOVED***"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9300",
                        "ToPort": "9300",
                        "CidrIp": "***REMOVED***"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9300",
                        "ToPort": "9300",
                        "SourceSecurityGroupName": { "Ref": "AppServerSecurityGroup" }
                    }
                ]
            }
        },

        "MediaApiLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Media API load balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"

                    }
                ]
            }
        },

        "KahunaLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Kahuna load balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "ElasticsearchIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupName": { "Ref": "ElasticsearchSecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": 0,
                "ToPort": 65535,
                "SourceSecurityGroupName": { "Ref": "ElasticsearchSecurityGroup" }
            }
        },
        "AppServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Application servers",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9000",
                        "ToPort": "9000",
                        "CidrIp": "***REMOVED***"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupName": { "Fn::GetAtt": ["MediaApiLoadBalancer", "SourceSecurityGroup.GroupName"]}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupName": { "Fn::GetAtt": ["KahunaLoadBalancer", "SourceSecurityGroup.GroupName"]}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupName": { "Fn::GetAtt": ["ImageLoaderLoadBalancer", "SourceSecurityGroup.GroupName"]}
                    }
                ]
            }
        },
        "AppClientSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Application clients",
                "SecurityGroupIngress": []
            }
        },

        "Group": {
            "Type": "AWS::IAM::Group",
            "Properties": {
                "Policies": [{
                    "PolicyName": "Group-Policy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": ["ec2:DescribeInstances", "cloudwatch:PutMetricData"],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": ["sqs:DeleteMessage", "sqs:ReceiveMessage"],
                                "Resource": [ { "Fn::GetAtt": ["Queue", "Arn"] } ]
                            },
                            {
                                "Effect": "Allow",
                                "Action": ["sns:Publish"],
                                "Resource": { "Ref": "Topic" }
                            }
                        ]
                    }
                }]
            }
        },
        "User": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Groups": [ { "Ref": "Group" } ]
            }
        },
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": { "Ref": "User" }
            }
        },

        "ImageBucket": {
            "Type": "AWS::S3::Bucket"
        },
        "ImageBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "ImageBucketPolicy",
                    "Statement": [ {
                        "Sid": "ImageBucketWriteAccess",
                        "Action": [ "s3:PutObject", "s3:GetObject", "s3:DeleteObject" ],
                        "Effect": "Allow",
                        "Resource": { "Fn::Join": [ "",
                            [ "arn:aws:s3:::", { "Ref": "ImageBucket" } , "/*" ] ]
                        },
                        "Principal": { "AWS": { "Fn::GetAtt": [ "User", "Arn" ] } }
                    } ]
                },
                "Bucket": { "Ref": "ImageBucket" }
            }
        },
        "ThumbBucket": {
            "Type": "AWS::S3::Bucket"
        },
        "ThumbBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "ThumbBucketPolicy",
                    "Statement": [ {
                        "Sid": "ThumbBucketWriteAccess",
                        "Action": [ "s3:PutObject", "s3:GetObject", "s3:DeleteObject" ],
                        "Effect": "Allow",
                        "Resource": { "Fn::Join": [ "",
                            [ "arn:aws:s3:::", { "Ref": "ThumbBucket" } , "/*" ] ]
                        },
                        "Principal": { "AWS": { "Fn::GetAtt": [ "User", "Arn" ] } }
                    } ]
                },
                "Bucket": { "Ref": "ThumbBucket" }
            }
        },
        "CropBucket": {
            "Type": "AWS::S3::Bucket"
        },
        "CropBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "CropBucketPolicy",
                    "Statement": [ {
                        "Sid": "CropBucketWriteAccess",
                        "Action": [ "s3:PutObject", "s3:GetObject", "s3:DeleteObject" ],
                        "Effect": "Allow",
                        "Resource": { "Fn::Join": [ "",
                            [ "arn:aws:s3:::", { "Ref": "CropBucket" } , "/*" ] ]
                        },
                        "Principal": { "AWS": { "Fn::GetAtt": [ "User", "Arn" ] } }
                    } ]
                },
                "Bucket": { "Ref": "CropBucket" }
            }
        },

        "KeyBucket": {
            "Type": "AWS::S3::Bucket"
        },
        "KeyBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "KeyBucketPolicy",
                    "Statement": [
                        {
                            "Action": [ "s3:GetObject" ],
                            "Effect": "Allow",
                            "Resource": { "Fn::Join": [ "",
                                [ "arn:aws:s3:::", { "Ref": "KeyBucket" } , "/*" ] ]
                            },
                            "Principal": { "AWS": { "Fn::GetAtt": [ "User", "Arn" ] } }
                        },
                        {
                            "Action": [ "s3:ListBucket" ],
                            "Effect": "Allow",
                            "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "KeyBucket" } ] ] },
                            "Principal": { "AWS": { "Fn::GetAtt": [ "User", "Arn" ] } }
                        }
                    ]
                },
                "Bucket": { "Ref": "KeyBucket" }
            }
        },

        "ElasticsearchAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "LaunchConfigurationName": { "Ref": "ElasticsearchLaunchConfig" },
                "MinSize": "2",
                "MaxSize": "4",
                "DesiredCapacity": "2",
                "HealthCheckType": "EC2",
                "HealthCheckGracePeriod": 180,
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Role",
                        "Value": "media-service-elasticsearch",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "ElasticsearchLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "KeyName": { "Ref": "KeyName" },
                "ImageId": "ami-eecd2899",
                "SecurityGroups": [
                    { "Ref": "ElasticsearchSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "InstanceType": "m1.medium",
                "UserData":{
                    "Fn::Base64":{
                        "Fn::Join":["", [
                            "#!/bin/bash -ev\n",

                            "adduser --disabled-password --system --group media-service\n",
                            "cp -r ~/.ssh /home/media-service/\n",

                            "mkdir /data\n",
                            "mount /dev/xvdb /data\n",

                            "apt-get -y update\n",
                            "apt-get -y install language-pack-en openjdk-7-jre-headless\n",

                            "cd /home/media-service\n",

                            "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                            "/media-service-elasticsearch/elasticsearch.tar.gz\n",

                            "tar xf elasticsearch.tar.gz\n",

                            "sed -i \\\n",
                            "    -e 's,@@REGION,", { "Ref": "AWS::Region" }, ",g' \\\n",
                            "    -e 's,@@STAGE,", { "Ref": "Stage" }, ",g' \\\n",
                            "    -e 's,@@ROLE,media-service-elasticsearch,g' \\\n",
                            "    -e 's,@@ACCESS_KEY,", { "Ref": "HostKeys" }, ",g' \\\n",
                            "    -e 's,@@SECRET_KEY,", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] }, ",g' \\\n",
                            "    elasticsearch/config/elasticsearch.yml\n",

                            "mkdir -p /home/media-service/logs\n",

                            "chown -R media-service /home/media-service /data\n",
                            "chgrp -R media-service /home/media-service /data\n",

                            "mv elasticsearch/elasticsearch.conf /etc/init/\n",

                            "start elasticsearch\n"
                        ]]
                    }
                }
            }
        },

        "MediaApiLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "SecurityGroups": [{ "Fn::GetAtt": ["MediaApiLoadBalancerSecurityGroup", "GroupId"] }],
                "Listeners": [
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "9000",
                        "Protocol": "HTTPS",
                        "SSLCertificateId": { "Ref": "MediaApiSSLCertificateId" }
                    },
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "9000",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:9000/management/healthcheck",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "2",
                    "Interval": "10",
                    "Timeout": "5"
                }
            }
        },
        "MediaApiAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "LaunchConfigurationName": { "Ref": "MediaApiLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "2",
                "DesiredCapacity": "1",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [
                    { "Ref": "MediaApiLoadBalancer" }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Role",
                        "Value": "media-service-media-api",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "MediaApiLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "HostKeys",
            "Properties": {
                "KeyName": { "Ref": "KeyName" },
                "ImageId": "ami-eecd2899",
                "SecurityGroups": [
                    { "Ref": "AppServerSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "InstanceType": "m1.small",
                "UserData": { "Fn::Base64": {
                    "Fn::Join":["", [
                        "#!/bin/bash -ev\n",

                        "adduser --disabled-password --system --group media-service\n",
                        "cp -r ~/.ssh /home/media-service/\n",

                        "apt-get -y update\n",
                        "apt-get -y install language-pack-en openjdk-7-jre-headless\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-media-api/media-api.conf",
                        " --directory-prefix=/etc/init\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-media-api/app.jar",
                        " --directory-prefix=/home/media-service\n",

                        "mkdir /home/media-service/logs\n",
                        "mkdir /etc/gu\n",

                        "chown -R media-service /home/media-service\n",
                        "chgrp -R media-service /home/media-service\n",

                        "cat > /etc/gu/stage <<EOF\n",
                        { "Ref": "Stage" }, "\n",
                        "EOF\n",

                        "cat > /etc/gu/media-api.properties<<EOF\n",
                        "aws.id=", { "Ref": "HostKeys" }, "\n",
                        "aws.secret=", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] }, "\n",
                        "sns.topic.arn=", { "Ref": "Topic" }, "\n",
                        "s3.image.bucket=", { "Ref": "ImageBucket" }, "\n",
                        "s3.thumb.bucket=", { "Ref": "ThumbBucket" }, "\n",
                        "auth.keystore.bucket=", { "Ref": "KeyBucket" }, "\n",
                        "EOF\n",

                        "start media-api\n"
                    ]]

                }}

            }
        },

        "KahunaLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "SecurityGroups": [{ "Fn::GetAtt": ["KahunaLoadBalancerSecurityGroup", "GroupId"] }],
                "Listeners": [
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "9000",
                        "Protocol": "HTTPS",
                        "SSLCertificateId": { "Ref": "KahunaSSLCertificateId" }
                    },
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "9000",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:9000/management/healthcheck",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "2",
                    "Interval": "10",
                    "Timeout": "5"
                }
            }
        },
        "KahunaAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "LaunchConfigurationName": { "Ref": "KahunaLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "2",
                "DesiredCapacity": "1",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [
                    { "Ref": "KahunaLoadBalancer" }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Role",
                        "Value": "media-service-kahuna",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "KahunaLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "HostKeys",
            "Properties": {
                "KeyName": { "Ref": "KeyName" },
                "ImageId": "ami-7ccf2a0b",
                "SecurityGroups": [
                    { "Ref": "AppServerSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "InstanceType": "t1.micro",
                "UserData": { "Fn::Base64": {
                    "Fn::Join":["", [
                        "#!/bin/bash -ev\n",

                        "adduser --disabled-password --system --group media-service\n",
                        "cp -r ~/.ssh /home/media-service/\n",

                        "apt-get -y update\n",
                        "apt-get -y install language-pack-en openjdk-7-jre-headless\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-kahuna/kahuna.conf",
                        " --directory-prefix=/etc/init\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-kahuna/app.jar",
                        " --directory-prefix=/home/media-service\n",

                        "mkdir /home/media-service/logs\n",
                        "mkdir /etc/gu\n",

                        "chown -R media-service /home/media-service\n",
                        "chgrp -R media-service /home/media-service\n",

                        "cat > /etc/gu/stage <<EOF\n",
                        { "Ref": "Stage" }, "\n",
                        "EOF\n",

                        "cat > /etc/gu/kahuna.properties<<EOF\n",
                        "aws.id=", { "Ref": "HostKeys" }, "\n",
                        "aws.secret=", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] }, "\n",
                        "auth.keystore.bucket=", { "Ref": "KeyBucket" }, "\n",
                        "EOF\n",

                        "start kahuna\n"
                    ]]

                }}

            }
        },

        "ThrallAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "LaunchConfigurationName": { "Ref": "ThrallLaunchConfig" },
                "MinSize": "2",
                "MaxSize": "4",
                "DesiredCapacity": "2",
                "HealthCheckType": "EC2",
                "HealthCheckGracePeriod": 180,
                "LoadBalancerNames": [ ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Role",
                        "Value": "media-service-thrall",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "ThrallLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "HostKeys",
            "Properties": {
                "KeyName": { "Ref": "KeyName" },
                "ImageId": "ami-7ccf2a0b",
                "SecurityGroups": [
                    { "Ref": "AppServerSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "InstanceType": "t1.micro",
                "UserData": { "Fn::Base64": {
                    "Fn::Join":["", [
                        "#!/bin/bash -ev\n",

                        "adduser --disabled-password --system --group media-service\n",
                        "cp -r ~/.ssh /home/media-service/\n",

                        "apt-get -y update\n",
                        "apt-get -y install language-pack-en openjdk-7-jre-headless\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-thrall/thrall.conf",
                        " --directory-prefix=/etc/init\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-thrall/app.jar",
                        " --directory-prefix=/home/media-service\n",

                        "mkdir /home/media-service/logs\n",
                        "mkdir /etc/gu\n",

                        "chown -R media-service /home/media-service\n",
                        "chgrp -R media-service /home/media-service\n",

                        "cat > /etc/gu/stage <<EOF\n",
                        { "Ref": "Stage" }, "\n",
                        "EOF\n",

                        "cat > /etc/gu/thrall.properties<<EOF\n",
                        "aws.id=", { "Ref": "HostKeys" }, "\n",
                        "aws.secret=", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] }, "\n",
                        "sqs.queue.url=", { "Ref": "Queue" }, "\n",
                        "s3.image.bucket=", { "Ref": "ImageBucket" }, "\n",
                        "EOF\n",

                        "start thrall\n"
                    ]]

                }}

            }
        },

        "ImageLoaderLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Image Loader load balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "***REMOVED***"
                    }
                ]
            }
        },
        "ImageLoaderLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "SecurityGroups": [{ "Fn::GetAtt": ["ImageLoaderLoadBalancerSecurityGroup", "GroupId"] }],
                "Listeners": [
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "9000",
                        "Protocol": "HTTPS",
                        "SSLCertificateId": { "Ref": "ImageLoaderSSLCertificateId" }
                    },
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "9000",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:9000/management/healthcheck",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "2",
                    "Interval": "10",
                    "Timeout": "5"
                }
            }
        },
        "ImageLoaderAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "LaunchConfigurationName": { "Ref": "ImageLoaderLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "2",
                "DesiredCapacity": "1",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [
                    { "Ref": "ImageLoaderLoadBalancer" }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Role",
                        "Value": "media-service-image-loader",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "ImageLoaderLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "HostKeys",
            "Properties": {
                "KeyName": { "Ref": "KeyName" },
                "ImageId": "ami-eecd2899",
                "SecurityGroups": [
                    { "Ref": "AppServerSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "InstanceType": "m1.medium",
                "UserData": { "Fn::Base64": {
                    "Fn::Join":["", [
                        "#!/bin/bash -ev\n",

                        "adduser --disabled-password --system --group media-service\n",
                        "cp -r ~/.ssh /home/media-service/\n",

                        "apt-get -y update\n",
                        "apt-get -y install language-pack-en openjdk-7-jre-headless\n",
                        "apt-get -y install imagemagick\n",

                        "mkdir /data\n",
                        "mount /dev/xvdb /data\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-image-loader/image-loader.conf",
                        " --directory-prefix=/etc/init\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-image-loader/app.jar",
                        " --directory-prefix=/home/media-service\n",

                        "mkdir /home/media-service/logs\n",
                        "mkdir /etc/gu\n",

                        "chown -R media-service /home/media-service\n",
                        "chgrp -R media-service /home/media-service\n",
                        "chown -R media-service /data\n",
                        "chgrp -R media-service /data\n",

                        "cat > /etc/gu/stage <<EOF\n",
                        { "Ref": "Stage" }, "\n",
                        "EOF\n",

                        "cat > /etc/gu/image-loader.properties<<EOF\n",
                        "aws.id=", { "Ref": "HostKeys" }, "\n",
                        "aws.secret=", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] }, "\n",
                        "sns.topic.arn=", { "Ref": "Topic" }, "\n",
                        "s3.image.bucket=", { "Ref": "ImageBucket" }, "\n",
                        "s3.thumb.bucket=", { "Ref": "ThumbBucket" }, "\n",
                        "upload.tmp.dir=/data\n",
                        "EOF\n",

                        "start image-loader\n"
                    ]]

                }}

            }
        },

        "CropperLoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Cropper load balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "***REMOVED***"
                    }
                ]
            }
        },
        "CropperLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "SecurityGroups": [{ "Fn::GetAtt": ["CropperLoadBalancerSecurityGroup", "GroupId"] }],
                "Listeners": [
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "9000",
                        "Protocol": "HTTPS",
                        "SSLCertificateId": { "Ref": "CropperSSLCertificateId" }
                    },
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "9000",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:9000/management/healthcheck",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "2",
                    "Interval": "10",
                    "Timeout": "5"
                }
            }
        },
        "CropperAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "LaunchConfigurationName": { "Ref": "CropperLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "2",
                "DesiredCapacity": "1",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [
                    { "Ref": "CropperLoadBalancer" }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Role",
                        "Value": "media-service-cropper",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "CropperLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "HostKeys",
            "Properties": {
                "KeyName": { "Ref": "KeyName" },
                "ImageId": "ami-eecd2899",
                "SecurityGroups": [
                    { "Ref": "AppServerSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "InstanceType": "m1.medium",
                "UserData": { "Fn::Base64": {
                    "Fn::Join":["", [
                        "#!/bin/bash -ev\n",

                        "adduser --disabled-password --system --group media-service\n",
                        "cp -r ~/.ssh /home/media-service/\n",

                        "apt-get -y update\n",
                        "apt-get -y install language-pack-en openjdk-7-jre-headless\n",
                        "apt-get -y install imagemagick\n",

                        "mkdir /data\n",
                        "mount /dev/xvdb /data\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-cropper/cropper.conf",
                        " --directory-prefix=/etc/init\n",

                        "wget https://s3-eu-west-1.amazonaws.com/media-service-dist/", { "Ref": "Stage" },
                        "/media-service-cropper/app.jar",
                        " --directory-prefix=/home/media-service\n",

                        "mkdir /home/media-service/logs\n",
                        "mkdir /etc/gu\n",

                        "chown -R media-service /home/media-service\n",
                        "chgrp -R media-service /home/media-service\n",
                        "chown -R media-service /data\n",
                        "chgrp -R media-service /data\n",

                        "cat > /etc/gu/stage <<EOF\n",
                        { "Ref": "Stage" }, "\n",
                        "EOF\n",

                        "cat > /etc/gu/cropper.properties<<EOF\n",
                        "aws.id=", { "Ref": "HostKeys" }, "\n",
                        "aws.secret=", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] }, "\n",
                        "sns.topic.arn=", { "Ref": "Topic" }, "\n",
                        "crop.output.tmp.dir=/data\n",
                        "EOF\n",

                        "start cropper\n"
                    ]]

                }}

            }
        },

        "ReaperAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "LaunchConfigurationName": { "Ref": "ReaperLaunchConfig" },
                "MinSize": "1",
                "MaxSize": "2",
                "DesiredCapacity": "1",
                "HealthCheckType": "EC2",
                "HealthCheckGracePeriod": 180,
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Role",
                        "Value": "media-service-reaper",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "ReaperLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "HostKeys",
            "Properties": {
                "KeyName": { "Ref": "KeyName" },
                "ImageId": "ami-7ccf2a0b",
                "SecurityGroups": [
                    { "Ref": "AppClientSecurityGroup" },
                    { "Ref": "SSHSecurityGroup" }
                ],
                "InstanceType": "t1.micro",
                "UserData": { "Fn::Base64": {
                    "Fn::Join": ["", [
                        "#!/bin/bash -ev\n",

                        "adduser --disabled-password --system --group media-service\n",
                        "cp -r ~/.ssh /home/media-service/\n",

                        "apt-get -y update\n",

                        "cat > /home/media-service/extract_ids.py <<EOF\n",
                        "import json\n",
                        "import sys\n",
                        "for hit in json.load(sys.stdin)['hits']: print hit['id']\n",
                        "EOF\n",

                        "MEDIA_API=http://", { "Fn::GetAtt": ["MediaApiLoadBalancer", "DNSName"] } ,"\n",

                        "cat > /home/media-service/reaper.sh <<EOF\n",
                        "curl --silent \"$MEDIA_API/images?until=20.days&size=100&show-secure-url=false\" ",
                        " -H 'X-Gu-Media-Key: 9046967b939c2c1d2456c50a9b8fc190' ",
                        " | python /home/media-service/extract_ids.py ",
                        " | xargs -I {} curl --silent -X DELETE \"$MEDIA_API/images/{}\"\n",
                        "EOF\n",

                        "chmod +x /home/media-service/reaper.sh\n",

                        "cat > /etc/cron.d/reaper <<EOF\n",
                        "# Delete images older than 30 days \n",
                        "* * * * * media-service /home/media-service/reaper.sh\n",
                        "EOF\n",

                        "cat > /etc/gu/stage <<EOF\n",
                        { "Ref": "Stage" }, "\n",
                        "EOF\n",

                        "chown -R media-service /home/media-service\n",
                        "chgrp -R media-service /home/media-service\n"

                    ]]
                }}
            }
        },
        
        "Topic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": { "Fn::GetAtt": [ "Queue", "Arn" ] },
                        "Protocol": "sqs"
                    }
                ]
            }
        },
        "Queue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
            }
        },
        "QueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyQueuePolicy",
                    "Statement": [
                        {
                            "Sid": "Allow-SendMessage-To-Queue-From-Topic",
                            "Effect": "Allow",
                            "Principal": { "AWS": "*" },
                            "Action": ["sqs:SendMessage"],
                            "Resource": "*",
                            "Condition": {
                                "ArnEquals": { "aws:SourceArn": { "Ref": "Topic" } }
                            }
                        }
                    ]
                },
                "Queues": [ { "Ref": "Queue" } ]
            }
        }

    },
    "Outputs": {
        "MediaApiLoadBalancer": {
          "Description": "Media API load balancer DNS",
          "Value": { "Fn::GetAtt": ["MediaApiLoadBalancer", "DNSName"] }
        },
        "ImageLoaderLoadBalancer": {
            "Description": "Image Loader API load balancer DNS",
            "Value": { "Fn::GetAtt": ["ImageLoaderLoadBalancer", "DNSName"] }
        },
        "KahunaLoadBalancer": {
            "Description": "Image Loader API load balancer DNS",
            "Value": { "Fn::GetAtt": ["KahunaLoadBalancer", "DNSName"] }
        },
        "ImageTopicArn": {
            "Description": "ARN of the image topic",
            "Value": { "Ref": "Topic" }
        }
    }
}
