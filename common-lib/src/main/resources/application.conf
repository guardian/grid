# Note: application.secret unset in DEV, injected in TEST/PROD

play {
  application.loader = "AppLoader"
  application.langs = "en"

  http{
    session {
      httpOnly = false
      secure = true
    }
    forwarded.trustedProxies=["0.0.0.0/0", "::/0"]
  }

  # Quick hack
  # TODO: rely on URL cache busting instead
  assets.defaultCache="public, max-age=60"
}

es {
  cluster: media-service
  port: 9300
}

image.processors = [
  "com.gu.mediaservice.lib.cleanup.GuardianMetadataCleaners",
  "com.gu.mediaservice.lib.cleanup.SupplierProcessors"
]

authentication.providers {
  machine {
    className = "com.gu.mediaservice.lib.auth.provider.ApiKeyAuthenticationProvider"
    config {
      # authKeyStoreBucket = <s3-bucket-with-api-keys>
    }
  }
  # TODO: short term we put panda here for backwards compatibility but the default provider should be something better
  user {
    className = "com.gu.mediaservice.lib.guardian.auth.PandaAuthenticationProvider"
    config {
      # all of the things relating to pan domain auth (these are currently sensibly defaulted in code)
      # panda.system = media-service
      # panda.bucketName = <s3-bucket-with-config>
      # panda.settingsFileKey = <s3-key-with-config>
    }
  }
}

# TODO: short term we put the Guardian permissions library here for backwards compatibility
authorisation.provider {
  className = "com.gu.mediaservice.lib.guardian.auth.PermissionsAuthorisationProvider"
  config {
    # permissions.bucket = <s3-bucket-with-permissions>
  }
}

uploadStatus.recordExpiry = "1 hour"

field.aliases = []

usageRights.applicable = [
  "com.gu.mediaservice.model.NoRights",
  "com.gu.mediaservice.model.Handout",
  "com.gu.mediaservice.model.PrImage",
  "com.gu.mediaservice.model.Screengrab",
  "com.gu.mediaservice.model.SocialMedia",
  "com.gu.mediaservice.model.Agency",
  "com.gu.mediaservice.model.CommissionedAgency",
  "com.gu.mediaservice.model.Chargeable",
  "com.gu.mediaservice.model.Bylines",
  "com.gu.mediaservice.model.StaffPhotographer",
  "com.gu.mediaservice.model.ContractPhotographer",
  "com.gu.mediaservice.model.CommissionedPhotographer",
  "com.gu.mediaservice.model.CreativeCommons",
  "com.gu.mediaservice.model.GuardianWitness",
  "com.gu.mediaservice.model.Pool",
  "com.gu.mediaservice.model.CrownCopyright",
  "com.gu.mediaservice.model.Obituary",
  "com.gu.mediaservice.model.ContractIllustrator",
  "com.gu.mediaservice.model.CommissionedIllustrator",
  "com.gu.mediaservice.model.StaffIllustrator",
  "com.gu.mediaservice.model.Composite",
  "com.gu.mediaservice.model.PublicDomain"
]

usageRightsConfigProvider = {
  className: "com.gu.mediaservice.lib.config.RuntimeUsageRightsConfig"
  config {
    externalStaffPhotographers = []
    internalStaffPhotographers = []
    contractedPhotographers = []
    contractIllustrators = []
    staffIllustrators = []
    creativeCommonsLicense = [
      "CC BY-4.0",
      "CC BY-SA-4.0",
      "CC BY-ND-4.0"
    ]
    freeSuppliers = []
    suppliersCollectionExcl {}
  }
}

domainMetadata.specifications = []

metadata.templates = []

# costFilter {
#  label: "chargeable",
#  chargeable: true
# }

#there is loss of image metadata during cropping, write back the metadata below from elasticsearch
metadata.writeBack {
  default = [
      "dateTaken",
      "description",
      "credit",
      "creditUri",
      "byline",
      "bylineTitle",
      "title",
      "copyright",
      "suppliersReference",
      "source",
      "specialInstructions",
      "keywords",
      "subLocation",
      "city",
      "state",
      "country",
      "subjects",
      "peopleInImage"
  ],
  domain = []
}
