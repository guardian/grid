# Note: application.secret unset in DEV, injected in TEST/PROD

play {
  application.loader = "AppLoader"
  application.langs = "en"

  http{
    session {
      httpOnly = false
      secure = true
    }
    forwarded.trustedProxies=["0.0.0.0/0", "::/0"]
  }

  # Quick hack
  # TODO: rely on URL cache busting instead
  assets.defaultCache="public, max-age=60"
}

es {
  cluster: media-service
  port: 9300
}

image.processors = [
  "com.gu.mediaservice.lib.cleanup.GuardianMetadataCleaners",
  "com.gu.mediaservice.lib.cleanup.SupplierProcessors"
]

authentication.providers {
  machine {
    className = "com.gu.mediaservice.lib.auth.provider.ApiKeyAuthenticationProvider"
    config {
      # authKeyStoreBucket = <s3-bucket-with-api-keys>
    }
  }
  # TODO: short term we put panda here for backwards compatibility but the default provider should be something better
  user {
    className = "com.gu.mediaservice.lib.guardian.auth.PandaAuthenticationProvider"
    config {
      # all of the things relating to pan domain auth (these are currently sensibly defaulted in code)
      # panda.system = media-service
      # panda.bucketName = <s3-bucket-with-config>
      # panda.settingsFileKey = <s3-key-with-config>
    }
  }
}

# TODO: short term we put the Guardian permissions library here for backwards compatibility
authorisation.provider {
  className = "com.gu.mediaservice.lib.guardian.auth.PermissionsAuthorisationProvider"
  config {
    # permissions.bucket = <s3-bucket-with-permissions>
  }
}

uploadStatus.recordExpiry = "1 hour"

field.aliases = []

usageRights.applicable = [
  "com.gu.mediaservice.model.NoRights",
  "com.gu.mediaservice.model.Handout",
  "com.gu.mediaservice.model.PrImage",
  "com.gu.mediaservice.model.Screengrab",
  "com.gu.mediaservice.model.SocialMedia",
  "com.gu.mediaservice.model.Agency",
  "com.gu.mediaservice.model.CommissionedAgency",
  "com.gu.mediaservice.model.Chargeable",
  "com.gu.mediaservice.model.Bylines",
  "com.gu.mediaservice.model.StaffPhotographer",
  "com.gu.mediaservice.model.ContractPhotographer",
  "com.gu.mediaservice.model.CommissionedPhotographer",
  "com.gu.mediaservice.model.CreativeCommons",
  "com.gu.mediaservice.model.GuardianWitness",
  "com.gu.mediaservice.model.Pool",
  "com.gu.mediaservice.model.CrownCopyright",
  "com.gu.mediaservice.model.Obituary",
  "com.gu.mediaservice.model.ContractIllustrator",
  "com.gu.mediaservice.model.CommissionedIllustrator",
  "com.gu.mediaservice.model.StaffIllustrator",
  "com.gu.mediaservice.model.Composite",
  "com.gu.mediaservice.model.PublicDomain"
]

# ----------------------------------------------------------------------------------------
# List of usage right categories standard users cannot select whilst uploading or editing
# List of rights category ids - e.g.   "guardian-witness", "pool" or "crown-copyright"
#-----------------------------------------------------------------------------------------
usageRights.stdUserExcluded = []

#--------------------------------------------------------------------------------------------
# List of leases that should be associated with an image when a rights category is selected
# (on upload or image edit)
# Format should be:
# usageRights.leases = [ (array)
#   {
#     category: "<<category-id>>",
#     type: "allow-use  | deny-use | allow-syndication | deny-syndication",
#     startDate: "TODAY | UPLOAD | TAKEN | TXDATE", <- other than today all entries map to image metadata field
#     duration: <<int nos years>>, <- optional and will be indefinite if excluded
#     notes: "<<text string>>" <- optional
#   },
#   ...
# ]
#--------------------------------------------------------------------------------------------
usageRights.leases = [
    {
      category: "screengrab",
      type: "allow-use",
      startDate: "UPLOAD",
      duration: 5,
      notes: "test lease"
    }
]


usageRightsConfigProvider = {
  className: "com.gu.mediaservice.lib.config.RuntimeUsageRightsConfig"
  config {
    externalStaffPhotographers = []
    internalStaffPhotographers = []
    contractedPhotographers = []
    contractIllustrators = []
    staffIllustrators = []
    creativeCommonsLicense = [
      "CC BY-4.0",
      "CC BY-SA-4.0",
      "CC BY-ND-4.0"
    ]
    freeSuppliers = []
    suppliersCollectionExcl {}
    programmesOrganisationOwned {}
    programmesIndependents {}
    programmesAcquisitions {}
  }
}

# ------------------------------------------------------
# Rights Category Special Instructions and Restrictions
# Variables usageInstructions and usageRestrictions define the rights derived special instructions and restrictions that
# will be displayed along with the metadata for an image but are dervied from the selected rights category
# They are json objects keyed by the rights category key and with the required text as a string variable;
# usageInstructions {
#   <<rights category key>> = "<<required text>>"
# }
# usageRestrictions {
#  <<rights category key>> = "<<required text>>"
# }
# can be left blank or excluded if not required
# -------------------------------------------------------
usageRestrictions {
   contract-photographer = "This image has restrictions - see special instructions for details"
   handout = "This image can only be used in that context from which it originates - or you'll get told off!"
}
usageInstructions {
   contract-photographer = "You'll need to ask the photographer nicely if you want to use this image"
   obituary = "Make sure the person is dead before you use this image"
}

# -------------------------------------------------------------
# Announcements - notifications to be seen by users
# Format:
# [ (array)
#   { (json object)
#      announceId: (string) the unique id of the announcement - should be unique among all active announcements
#      description: (string) the main text to display in the notification notification_banner
#      endDate: (string, optional, format="yyyy-mm-dd") the date beyond which the announcement should not be seen, if not present set as today + 1 year
#      url: (string, optional) a link to a page/document providing further details regarding announcement
#      urlText: (string, optional) text to be included in a-tag hyperlink (will revert to default if not present)
#      category: (string) the type of announcement - will control styling and display, Enum=announcement, information, warning, error, success
#      lifespan: (string) the lifecycle behaviour Enum=transient (message disappears on any click etc),
#                                                      session (message must be acknowledged but action NOT stored in client cookie - used for current session messages)
#                                                      persistent (message must be acknowledged and action stored in client cookie - used for long running announcements)
#   },
#   ...
# ]
# -----------------------------------------------------------------
announcements = []

domainMetadata.specifications = []

metadata.templates = []

# costFilter {
#  label: "chargeable",
#  chargeable: true
# }

restrictDownload = false #This is overridden in common.conf
