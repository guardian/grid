<configuration>

    <conversionRule conversionWord="coloredLevel" converterClass="play.api.libs.logback.ColoredLevel" />

    <if condition='property("STAGE").contains("DEV")'>
        <then>
            <property name="LOGS_LOCATION" value="${application.home}/logs" />
        </then>
        <else>
            <property name="LOGS_LOCATION" value="logs" />
        </else>
    </if>

    <appender name="LOGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_LOCATION}/application.log</file>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_LOCATION}/application.log.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>7</maxHistory>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>%date - [%level] - from %logger in %thread markers=%marker %n%message%n%xException%n</pattern>
        </encoder>
    </appender>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
      <encoder class="net.logstash.logback.encoder.LogstashEncoder" />
    </appender>

    <appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
      <appender-ref ref="STDOUT" />
    </appender>

    <logger name="play" level="INFO" />
    <logger name="application" level="INFO" />
    <logger name="request" level="INFO" />
    <logger name="software.amazon.kinesis" level="INFO" />

    <root level="INFO">
      <appender-ref ref="LOGFILE"/>
      <if condition='!property("STAGE").contains("DEV")'>
        <then>
          <appender-ref ref="ASYNCSTDOUT"/>
        </then>
      </if>
    </root>

</configuration>
